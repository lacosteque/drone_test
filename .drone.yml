kind: pipeline
type: docker
name: default


environment:
  SRC_DIR: "/nerd_builder/src"
  BIN_DIR: "/nerd_builder/src/usr/bin"
  SHARE_DIR: "/nerd_builder/src/usr/share"
  OUTPUT_DIR: "/nerd_builder/output"
  TEMP_DIR: "/nerd_builder/temp"
  PKG_PATH: "/nerd_builder/temp/pkg_path.txt"


steps:

- name: make structure
  image: alpine:latest
  volumes:
  - name: builder
    path:  /nerd_builder/
  commands:
  - mkdir -p "$${BIN_DIR}" "$${SHARE_DIR}" "$${TEMP_DIR}" "$${OUTPUT_DIR}"
  
- name: micro install
  image: alpine:3.15
  volumes:
  - name: builder
    path:  /nerd_builder/
  commands:
  - apk add --update --no-cache curl bash
  - curl https://getmic.ro | bash
  #- mv $(which micro) "/tmp/$${HOME_DIR}/src/usr/bin/nerdmicro"
  - mv ./micro "$${BIN_DIR}/nerdmicro"
  - ls -l /nerd_builder/
  depends_on:
  - make structure

- name: fetch loki docker driver 
  image: alpine:3.15
  environment:
    VERSION: 2.7.0
  volumes:
  - name: builder
    path: /nerd_builder/
  - name: docker-socket
    path: /var/run/docker.sock
  - name: docker-plugins
    path: /plugins/
  privileged: true
  commands:
  - apk add --update --no-cache docker jq
  - | 
    if docker plugin ls | grep "grafana/loki-docker-driver:$${VERSION}"; then
      echo "Plugin already exists"
    else
      docker plugin install "grafana/loki-docker-driver:$${VERSION}" --grant-all-permissions
    fi
    
  - | 
    loki_id=$(docker plugin ls | awk '/Loki Logging Driver/ {print $1}')
      if [ -n "$loki_id" ]; then
        inspect_result=$(docker plugin inspect --format '{{json .}}' "$loki_id")
        loki_plugin_id=$(echo "$inspect_result" | jq -r '.Id')

        cp -r "/plugins/$${loki_plugin_id}/rootfs" "$${TEMP_DIR}"
        rm -f "{TEMP_DIR}/rootfs/var/run"
        cat "/plugins/$${loki_plugin_id}/config.json" | jq .plugin.Config > "$${TEMP_DIR}/config.json"
        tar -czf "/$${SHARE_DIR}/loki-docker-driver-$${VERSION}.tar.gz" \
            -C "$${TEMP_DIR}" rootfs config.json
      else
        echo "Loki Logging Driver not found."
      fi
  depends_on:
  - micro install

- name: build nerd
  image: alpine:3.15
  environment:
    GOOS: linux
    GOARCH: amd64
    CGO_ENABLED: 0
  volumes:
  - name: builder
    path: /nerd_builder/
  commands:
  - apk add --update --no-cache go
  - go build -o "$${BIN_DIR}/nerd" main.go
  depends_on:
  - fetch loki docker driver

- name: make pkg
  image: alpine:3.15
  environment:
    TZ: Europe/Moscow
    NAME: nerd-build
    ARCH: x86_64
    RELEASE: 1.1.1
    OUTPUT_TYPE: rpm
    INPUT_TYPE: dir
    LICENSE: GNU GPL
    LOG: info
  volumes:
  - name: builder
    path: /nerd_builder/
  commands:
  - apk add --no-cache ruby tzdata && gem install fpm
  - |
    if [ "$${PKG}" = "rpm" ]; then \
        apk add --no-cache rpm; \
    elif [ "$${PKG}" = "deb" ]; then \
        apk add --no-cache binutils tar; \
    fi
  - VERSION=$(TZ=$${TZ} date +'%Y%m%dT%H%M%S')
  - PACKAGE_PATH="$${OUTPUT_DIR}/$${NAME}-$${VERSION}-$${RELEASE}.$${ARCH}.$${OUTPUT_TYPE}"
  - | 
    #Command-line Reference - https://fpm.readthedocs.io/en/latest/cli-reference.html
    fpm -s "$${INPUT_TYPE}" \
        -t "$${OUTPUT_TYPE}" \
        -p "$${PACKAGE_PATH}" \
        -n "$${NAME}" \
        -v "$${RELEASE}" \
        -a "$${ARCH}" \
        --license "$${LICENSE}" \
        --log "$${LOG}" \
        --description "Средство для автоматизированного обновления Docker-контейнеров 🤓" \
        --url "https://dev.gnivc.ru/gnivc/nerd/" \
        -C "$${SRC_DIR}" .
  - echo "$${PACKAGE_PATH}" > "$${PKG_PATH}"
  depends_on:
  - build nerd

- name: push storage
  image: alpine:3.15
  environment:
    URL: http://10.250.26.8:9000
    PASS:
      from_secret: pass
    TO: -1001184051909
  volumes:
  - name: builder
    path: /nerd_builder/
  commands:
  - apk add --no-cache curl
  - curl -O https://76ea63ad-874c-4390-a572-052dccadefc6.selstorage.ru/supload/supload.sh
  - PACKAGE_PATH=$(cat "$${PKG_PATH}") 
  - sh ./supload.sh -u 47066_temp -k "$${PASS}" temp "$${PACKAGE_PATH}"
  depends_on:
  - build nerd

volumes:
- name: builder
  temp: {}

- name: docker-socket
  host:
    path: /var/run/docker.sock

- name: docker-plugins
  host:
    path: /var/lib/docker/plugins/
