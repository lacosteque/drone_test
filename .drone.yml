kind: pipeline
type: docker
name: default


environment:
  LOKI_VERSION_STORAGE: "/temp/loki.version"
  NERD_VERSION_STORAGE: "/temp/nerg.version"
  PKG_PATH: "/temp/pkg.path"
  LOG: "/temp/build.log"
  ARCH: amd64
  OS: linux


steps:

- name: fetch nerd version
  image: alpine:3.15
  volumes:
  - name: tmp
    path: /temp
  commands:
  - apk add --no-cache git
  - |
    git fetch --tags && \
    git describe --tags --abbrev=0 > "$${NERD_VERSION_STORAGE}"
  - echo "[done] - $${DRONE_STEP_NAME}" | tee -a "$${LOG}"

- name: fetch loki version
  image: alpine:3.15
  volumes:
  - name: tmp
    path: /temp
  commands:
  - |
    grep '#### Версия loki-docker-driver: ' README.md | awk '{print $NF}' > "$${LOKI_VERSION_STORAGE}" 
  - echo "[done] - $${DRONE_STEP_NAME}" | tee -a "$${LOG}"

- name: build nerd
  image: alpine:3.15
  environment:
    CGO_ENABLED: 0
    GO_VERSION: 1.19.9-r0
    GOARCH: "$${ARCH}"
    GOOS: "$${OS}"
  volumes:
  - name: source
    path: /src
  - name: tmp
    path: /temp
  commands:
  - export RELEASE=$(cat "$${NERD_VERSION_STORAGE}")
  - apk add --no-cache go="$${GO_VERSION}" --repository=https://dl-cdn.alpinelinux.org/alpine/v3.17/community
  - mkdir -p /src/usr/bin/ && go build -o /src/usr/bin/nerd cmd/nerd.go
  - echo "[done] - $${DRONE_STEP_NAME} - $${RELEASE} - $${OS} - $${ARCH}" | tee -a "$${LOG}"
  depends_on:
  - fetch nerd version
  
- name: build nerdmicro 
  image: alpine:3.15
    environment:
    CGO_ENABLED: 0
    GOARCH: "$${ARCH}"
    GOOS: "$${OS}"
  volumes:
  - name: source
    path: /src
  - name: tmp
    path: /temp
  commands:
  - apk add --update --no-cache git go make
  - git clone https://github.com/zyedidia/micro.git && cd micro
  - make build
  - mv micro /src/usr/bin/nerdmicro
  - echo "[done] - $${DRONE_STEP_NAME}" | tee -a "$${LOG}"

- name: test nerdmicro 
  image: alpine:3.15
  volumes:
  - name: source
    path: /src
  - name: tmp
    path: /temp
  commands:
  - /src/usr/bin/nerdmicro -h | grep -qE "Usage\: micro \[OPTIONS\] \[FILE\]..." || echo "Nerdmicro fail test!" | tee -a "$${LOG}" && exit 1
  depends_on:
  - build nerdmicro
  
- name: make loki 
  image: alpine:3.15
  environment:
    SKOPEO_VERSION: 1.5.2-r1
    JQ_VERSION: 1.6-r1
  volumes:
  - name: source
    path: /src
  - name: tmp
    path: /temp
  commands:
  - export LOKI_VERSION=$(cat "$${LOKI_VERSION_STORAGE}")
  - apk add --update --no-cache skopeo="$${SKOPEO_VERSION}" jq="$${JQ_VERSION}"
  - mkdir -p /temp/image && skopeo copy "docker://docker.io/grafana/loki-docker-driver:$${LOKI_VERSION}" --override-arch "$${ARCH}" --override-os "$${OS}" dir:/temp/image
  - |
    cat /temp/image/manifest.json | jq .config.digest | awk -F ':' '{print $2}' | sed 's/"//g' > /temp/hash.txt
    cat "/temp/image/$(cat /temp/hash.txt)" > /temp/config.json
  - | 
    cat /temp/image/manifest.json | jq '.layers[0].digest' | awk -F ':' '{print $2}' | sed 's/"//g' > /temp/hash.txt
    mkdir -p /temp/rootfs && tar -xzf "/temp/image/$(cat /temp/hash.txt)" -C /temp/rootfs
  - find /temp/rootfs -type f -links +1 -exec rm {} \; && rm -f /temp/rootfs/var/run
  - mkdir -p /src/usr/share/loki-driver/ && tar -czf "/src/usr/share/loki-driver/loki-docker-driver-$${LOKI_VERSION}.tar.gz" -C /temp rootfs config.json
  - echo "[done] - $${DRONE_STEP_NAME} - $${LOKI_VERSION} - $${OS} - $${ARCH}" | tee -a "$${LOG}"
  depends_on:
  - fetch loki version

- name: make pkg
  image: alpine:3.15
  environment:
    TZ: Europe/Moscow
    NAME: nerd-build
    OUTPUT_TYPE: rpm
    FPM_VERSION: 1.15.1
  volumes:
  - name: source
    path: /src
  - name: tmp
    path: /temp
  commands:
  - export RELEASE=$(cat "$${NERD_VERSION_STORAGE}") && export LOKI_VERSION=$(cat "$${LOKI_VERSION_STORAGE}")
  #- apk update && apk add --no-cache ruby ruby-dev g++ gc make && gem install json etc fpm:"$${FPM_VERSION}"
  - apk add --no-cache ruby tzdata && gem install fpm
  - |
    cat << EOF > after-install.sh

    #!/bin/bash
    
    echo "*** Workflow with dirs ***"
    
    [ -d /var/lib/nerd ] && echo "[*] check > /var/lib/nerd" || (mkdir -p /var/lib/nerd/ && echo "[+] make > /var/lib/nerd")
    [ -d /var/lib/nerd/log ] && echo "[*] check > /var/lib/nerd/log" || (mkdir -p mkdir -p /var/lib/nerd/log && echo "[+] make > /var/lib/nerd/log")
    [ -d /var/lib/nerd/images ] && echo "[*] check > /var/lib/nerd/images" || (mkdir -p /var/lib/nerd/images && echo "[+] make > /var/lib/nerd/images")
    [ -d /var/lib/nerd/compositions ] && echo "[*] check > /var/lib/nerd/compositions" || (mkdir -p /var/lib/nerd/compositions && echo "[+] make > /var/lib/nerd/compositions")
    [ -d /var/lib/nerd/plugins/loki-driver ] && echo "[*] check > /var/lib/nerd/plugins/loki-driver" || (mkdir -p /var/lib/nerd/plugins/loki-driver && echo "[+] make > /var/lib/nerd/plugins/loki-driver")
    chmod -R 0755 /var/lib/nerd/ && echo "[+] change mode 0755"

    echo "*** Workflow with Nerd ***"
    chmod +x /usr/bin/nerd && echo "[+] change mode +x" 

    echo "*** Workflow with NerdMicro ***"
    chmod +x /usr/bin/nerdmicro && echo "[+] change mode +x"
    
    echo "*** Workflow with Loki driver ***"
    if [ -z "\$(docker plugin ls | grep -E [^/]loki-docker-driver:$${LOKI_VERSION})" ]; then

      echo "[*] Plugin loki-docker-driver:$${LOKI_VERSION} not found."

      echo "** Unzip **"
      tar -xzf "/usr/share/loki-driver/loki-docker-driver-$${LOKI_VERSION}.tar.gz" -C /var/lib/nerd/plugins/loki-driver/ && echo "[+] The driver is unpacked in /var/lib/nerd/plugins/loki-driver/"
      
      echo "** Creating plugin loki-docker-driver:$${LOKI_VERSION} **"
      docker plugin create "loki-docker-driver:$${LOKI_VERSION}" /var/lib/nerd/plugins/loki-driver/ > /dev/null && echo "[+] The plugin has been created."
      
      echo "** Enabling plugin loki-docker-driver:$${LOKI_VERSION} **"
      docker plugin enable "loki-docker-driver:$${LOKI_VERSION}" > /dev/null && echo "[+] The plugin is enabled."

    else
      echo "[*] Plugin loki-docker-driver:$${LOKI_VERSION} is found." 
      
    fi
    
    exit 0
    EOF

    
  - |
    if [ "$${OUTPUT_TYPE}" = "rpm" ]; then
        apk add --no-cache rpm
        VERSION="$(TZ=$${TZ} date +'%Y%m%dT%H%M%S')_$${RELEASE}"
    elif [ "$${OUTPUT_TYPE}" = "deb" ]; then 
        apk add --no-cache binutils tar
        VERSION="$(TZ=$${TZ} date +'%Y%m%d%H%M%S')-$${RELEASE}"
    fi
  - PACKAGE_PATH="/temp/$${NAME}-$${VERSION}.$${ARCH}-loki-$${LOKI_VERSION}.$${OUTPUT_TYPE}"
  - | 
    #Command-line Reference - https://fpm.readthedocs.io/en/latest/cli-reference.html
    fpm -t "$${OUTPUT_TYPE}" \
        -p "$${PACKAGE_PATH}" \
        -v "$${VERSION}" \
        -a "$${ARCH}" \
        --chdir "/src/" \
        --input-type "dir" \
        --name "$${NAME}" \
        --maintainer "JSC GNIVC" \
        --vendor "JSC GNIVC" \
        --category "Applications/System" \
        --after-install "after-install.sh" \
        --log "error" \
        --license "GNU GPL" \
        --description "Versatile tool to support smart deployment process" \
        --url "https://dev.gnivc.ru/gnivc/nerd" . | tee -a fpm.log
  - grep -qE "fatal|error" fpm.log && cat fpm.log | tee -a "$LOG" && exit 1
  - echo "$${PACKAGE_PATH}" > "$${PKG_PATH}"
  - echo "[done] - $${DRONE_STEP_NAME} - $${VERSION} - $${ARCH} - $${OUTPUT_TYPE}" | tee -a "$${LOG}"
  depends_on:
  - test nerdmicro
  - make loki
  - build nerd

- name: push storage
  image: alpine:3.15
  environment:
    ENDPOINT: http://10.250.26.8:9000
    ACCESS_KEY:
      from_secret: minio_access_key
    SECRET_KEY: 
      from_secret: minio_secret_key
    BUCKET_NAME: nerd-builds
    ALIAS: storage
    PASS:
      from_secret: pass
    
  volumes:
  - name: tmp
    path: /temp
  commands:
  - apk add --no-cache curl bash minio-client --repository=https://dl-cdn.alpinelinux.org/alpine/v3.19/community
  #- FILENAME=$(cat "$${PKG_PATH}" | awk -F'/' '{print $NF}')
  #- FILE=$(cat "$${PKG_PATH}") 
  #- mcli config host add "$${ALIAS}" "$${ENDPOINT}" "$${ACCESS_KEY}" "$${SECRET_KEY}"
  #- mcli cp "$${FILE}" "$${ALIAS}/$${BUCKET_NAME}/$${FILENAME}"

  - curl -O https://76ea63ad-874c-4390-a572-052dccadefc6.selstorage.ru/supload/supload.sh
  - cp supload.sh /usr/local/bin/supload
  - chmod +x /usr/local/bin/supload
  - FILENAME=$(cat "$${PKG_PATH}" | awk -F'/' '{print $NF}')
  - FILE=$(cat "$${PKG_PATH}") 
  #- supload -u 47066_temp -k "$${PASS}" temp/nerd "$${FILE}"
  - supload -u 47066_temp -k "$${PASS}" temp/nerd "$${FILE}"
  - echo "[done] - $${DRONE_STEP_NAME} - <a href=\"$${URL}/nerd-builds/$${FILENAME}\">download</a>" | tee -a "$${LOG}"
  
  depends_on:
  - make pkg

- name: send telegram notification
  image: alpine:3.15
  environment:
    TG_TOKEN:
      from_secret: tg_token
    TO: -1001184051909
  volumes:
  - name: tmp
    path: /temp
  commands:
  - apk add --update --no-cache curl jq
  - |
    [[ "$${DRONE_BUILD_STATUS}" == "success" ]] && MARK="✅" || MARK="❌"
    [[ -f "$${LOG}" ]] && LOG=$(cat "$${LOG}")
    HEADER="$${MARK} <a href=\"$DRONE_BUILD_LINK\">Build #$${DRONE_BUILD_NUMBER}</a> - <a href=\"$${DRONE_COMMIT_LINK}\">commit</a>
    <b>Repo:</b> $${DRONE_REPO}
    
    
    "    
  - | 
    OK=$(curl -s "https://api.telegram.org/bot$${TG_TOKEN}/sendMessage" \
        --data "chat_id=$${TO}" \
        --data "parse_mode=HTML" \
        --data "text=$${HEADER}$${LOG}" | jq '.ok')  
  - |
    if [[ "$${OK}" == "false" ]]; then
      cat "$${LOG}" > "status_$${DRONE_BUILD_NUMBER}.log"
      curl -s "https://api.telegram.org/bot$${TG_TOKEN}/sendDocument" \
        -F chat_id="$${TO}" \
        -F parse_mode="HTML" \
        -F caption="$${HEADER}" \
        -F document=@"status_$${DRONE_BUILD_NUMBER}.log"
    fi

  depends_on:
  - push storage
        
  when:
    status:
    - success
    - failure

volumes:
  
- name: source
  temp: {}

- name: tmp
  temp: {}
