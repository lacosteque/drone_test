kind: pipeline
type: docker
name: default


environment:
  PKG_PATH: "/temp/pkg_path.txt"
  LOG: "/temp/build.log"
  LOKI_VERSION: 2.7.0
  ARCH: amd64
  OS: linux


steps:

- name: build nerd
  image: alpine:3.15
  environment:
    CGO_ENABLED: 0
    GO_VERSION: 1.19.9-r0
  volumes:
  - name: source
    path: /src
  - name: tmp
    path: /temp
  commands:
  - apk add --no-cache go="$${GO_VERSION}" --repository=https://dl-cdn.alpinelinux.org/alpine/v3.17/community
  - go env GOARCH="$${ARCH}" GOOS="$${OS}" build -o /src/usr/bin/nerd cmd/nerd.go
  - echo "[done] - $${DRONE_STEP_NAME} - $${OS} - $${ARCH}" | tee -a "$${LOG}"
  
- name: make micro 
  image: alpine:3.15
  environment:
    CURL_VERSION: 8.5.0-r0
  volumes:
  - name: source
    path: /src
  - name: tmp
    path: /temp
  commands:
  - apk add --update --no-cache curl="$${CURL_VERSION}"
  - mkdir -p /src/usr/bin/ && curl -s --show-error https://getmic.ro | sh
  - mv micro /src/usr/bin/nerdmicro
  - echo "[done] - $${DRONE_STEP_NAME}" | tee -a "$${LOG}"

- name: make loki 
  image: alpine:3.15
  environment:
    SKOPEO_VERSION: 1.5.2-r1
    JQ_VERSION: 1.6-r1
  volumes:
  - name: source
    path: /src
  - name: tmp
    path: /temp
  commands:
  - apk add --update --no-cache skopeo="$${SKOPEO_VERSION}" jq="$${JQ_VERSION}"
  - mkdir -p /temp/image && skopeo copy "docker://docker.io/grafana/loki-docker-driver:$${LOKI_VERSION}" --override-arch "$${ARCH}" --override-os "$${OS}" dir:/temp/image
  - |
    cat /temp/image/manifest.json | jq .config.digest | awk -F ':' '{print $2}' | sed 's/"//g' > /temp/hash.txt
    cat "/temp/image/$(cat /temp/hash.txt)" > /temp/config.json
  - | 
    cat /temp/image/manifest.json | jq '.layers[0].digest' | awk -F ':' '{print $2}' | sed 's/"//g' > /temp/hash.txt
    mkdir -p /temp/rootfs && tar -xzf "/temp/image/$(cat /temp/hash.txt)" -C /temp/rootfs
  - mkdir -p /src/usr/share/loki-driver/ && tar -czf "/src/usr/share/loki-driver/loki-docker-driver-$${LOKI_VERSION}.tar.gz" -C /temp rootfs config.json
  - echo "[done] - $${DRONE_STEP_NAME} - $${LOKI_VERSION}" | tee -a "$${LOG}"

- name: make pkg
  image: alpine:3.15
  environment:
    TZ: Europe/Moscow
    NAME: nerd-build
    RELEASE: 1.1.1
    OUTPUT_TYPE: deb
    RUBY_VERSION: 3.0.6-r0
    TZDATA_VERSION: 2023c-r0
    FPM_VERSION: 1.15.1
    RPM_VERSION: 4.16.1.3-r1
    BINUTILS_VERSION: 2.37-r3
    TAR_VERSION: 1.34-r1
  volumes:
  - name: source
    path: /src
  - name: tmp
    path: /temp
  commands:
  - apk add --no-cache ruby="$${RUBY_VERSION}" tzdata="$${TZDATA_VERSION}" && gem install fpm -v "$${FPM_VERSION}"
  - |
    cat << EOF > after-install.sh

    #!/bin/bash

    echo "[+] Make Nerd Structure"
    mkdir -p /var/lib/nerd/
    mkdir -p /var/lib/nerd/compositions
    mkdir -p /var/lib/nerd/images
    mkdir -p /var/lib/nerd/log
    mkdir -p /var/lib/nerd/plugins/loki-driver
    chmod -R 0755 /var/lib/nerd/

    echo "[+] Make Execute Nerd & Nerdmicro"
    chmod +x /usr/bin/nerd && chmod +x /usr/bin/nerdmicro

    echo "[+] Extract Loki Driver"
    tar -xzf "/usr/share/loki-driver/loki-docker-driver-$${LOKI_VERSION}.tar.gz" -C /var/lib/nerd/plugins/loki-driver/

    if [ -z "\$(docker plugin ls | grep -E [^/]loki-docker-driver:$${LOKI_VERSION})" ]; then
      echo "[+] Creating plugin loki-docker-driver:$${LOKI_VERSION}"
      docker plugin create "loki-docker-driver:$${LOKI_VERSION}" /var/lib/nerd/plugins/loki-driver/ > /dev/null
      echo "[+] Enabling plugin loki-docker-driver:$${LOKI_VERSION}"
      docker plugin enable "loki-docker-driver:$${LOKI_VERSION}" > /dev/null
    fi
    
    exit 0
    EOF

    cat << EOF > after-remove.sh

    #!/bin/bash

    if [ -n \$(find /var/lib/nerd/log/ -mindepth 1 -print -quit 2>/dev/null) ]; then  
      mkdir -p /var/log/nerd && cp -r /var/lib/nerd/log/ /var/log/nerd
      echo "[+] Moving Nerd Log in /var/log/"
    fi

    echo "[+] Remove Nerd Structure"
    rm -rf /var/lib/nerd/

    echo "[+] Remove Loki Driver Archive"
    rm -rf /usr/share/loki-driver/
    
    if [ -n "\$(docker plugin ls | grep -E [^/]loki-docker-driver:$${LOKI_VERSION})" ]; then
      echo "[+] Disabling plugin loki-docker-driver:$${LOKI_VERSION}" 
      docker plugin disable "loki-docker-driver:$${LOKI_VERSION}" --force > /dev/null
      echo "[+] Removal plugin loki-docker-driver:$${LOKI_VERSION}"
      docker plugin rm "loki-docker-driver:$${LOKI_VERSION}" > /dev/null
    fi
    
    exit 0
    EOF
    
  - |
    if [ "$${OUTPUT_TYPE}" = "rpm" ]; then
        apk add --no-cache rpm="$${RPM_VERSION}"
        VERSION="$(TZ=$${TZ} date +'%Y%m%dT%H%M%S')_$${RELEASE}"
    elif [ "$${OUTPUT_TYPE}" = "deb" ]; then 
        apk add --no-cache binutils="$${BINUTILS_VERSION}" tar="$${TAR_VERSION}"
        VERSION="$(TZ=$${TZ} date +'%Y%m%d%H%M%S')-$${RELEASE}"
    fi
  - PACKAGE_PATH="/temp/$${NAME}-$${VERSION}.$${ARCH}-loki-$${LOKI_VERSION}.$${OUTPUT_TYPE}"
  - | 
    #Command-line Reference - https://fpm.readthedocs.io/en/latest/cli-reference.html
    fpm -t "$${OUTPUT_TYPE}" \
        -p "$${PACKAGE_PATH}" \
        -v "$${VERSION}" \
        -a "$${ARCH}" \
        --chdir "/src/" \
        --input-type "dir" \
        --name "$${NAME}" \
        --maintainer "JSC GNIVC" \
        --vendor "JSC GNIVC" \
        --category "Applications/System" \
        --after-install "after-install.sh" \
        --after-remove "after-remove.sh" \
        --log "error" \
        --license "GNU GPL" \
        --description "Versatile tool to support smart deployment process" \
        --url "https://dev.gnivc.ru/gnivc/nerd" . | tee -a fpm.log
  - grep -qE "fatal|error" fpm.log && cat fpm.log | tee -a "$LOG" && exit 1
  - echo "$${PACKAGE_PATH}" > "$${PKG_PATH}"
  - echo "[done] - $${DRONE_STEP_NAME} - $${VERSION} - $${ARCH} - $${OUTPUT_TYPE}" | tee -a "$${LOG}"
  depends_on:
  - make micro
  - make loki
  - build nerd

- name: push storage
  image: alpine:3.15
  environment:
    ENDPOINT: http://10.250.26.8:9000
    MC_VERSION: 0.20231202.112410-r0
    ACCESS_KEY:
      from_secret: minio_access_key
    SECRET_KEY: 
      from_secret: minio_secret_key
    BUCKET_NAME: nerd-builds
    ALIAS: storage
    
  volumes:
  - name: tmp
    path: /temp
  commands:
  - apk add --no-cache minio-client="$${MC_VERSION}" --repository=https://dl-cdn.alpinelinux.org/alpine/v3.19/community
  - FILENAME=$(cat "$${PKG_PATH}" | awk -F'/' '{print $NF}')
  - FILE=$(cat "$${PKG_PATH}") 
  - mc config host add "$${ALIAS}" "$${ENDPOINT}" "$${ACCESS_KEY}" "$${SECRET_KEY}"
  - mc cp "$${FILE}" "$${ALIAS}/$${BUCKET_NAME}/$${FILENAME}"

  #- curl -Os https://76ea63ad-874c-4390-a572-052dccadefc6.selstorage.ru/supload/supload.sh
  #- cp supload.sh /usr/local/bin/supload
  #- chmod +x /usr/local/bin/supload
  #- FILENAME=$(cat "$${PKG_PATH}" | awk -F'/' '{print $NF}')
  #- FILE=$(cat "$${PKG_PATH}") 

   #- supload -u 47066_temp -k "$${PASS}" temp/nerd "$${FILE}" -d 1d
   #curl -v -X PUT -T keycloak-14.0.0.tar.gz \ 
   #-H "Date: $(date -R)" \
   #-H "Content-Type: application/octet-stream" \
   #-H "Authorization: AWS "$${LOGIN}":$(echo -en "PUT\n\napplication/octet-stream\n$(date -R)\n/nerd-builds/$${FILENAME}" \ 
   #| openssl sha1 -hmac "$${LOGIN}" -binary \
   #| base64)" \
   #"$${URL}/nerd-builds/$${FILENAME}"
  - echo "[done] - $${DRONE_STEP_NAME} - <a href=\"$${URL}/nerd-builds/$${FILENAME}\">download</a>" | tee -a "$${LOG}"
  
  depends_on:
  - make pkg

- name: send telegram notification
  image: alpine:3.15
  environment:
    TG_TOKEN:
      from_secret: tg_token
    TO: -1001184051909
    MESSAGE_THREAD_ID: 4392 # "Сервисные уведомления"
  volumes:
  - name: tmp
    path: /temp
  commands:
  - apk add --update --no-cache curl jq
  - |
    [[ "$${DRONE_BUILD_STATUS}" == "success" ]] && MARK="✅" || MARK="❌"
    [[ -f "$${LOG}" ]] && LOG=$(cat "$${LOG}")
    HEADER="$${MARK} <a href=\"$DRONE_BUILD_LINK\">Build #$${DRONE_BUILD_NUMBER}</a>
    <b>Repo:</b> $${DRONE_REPO}
    
    "    
  - | 
    OK=$(curl -s "https://api.telegram.org/bot$${TG_TOKEN}/sendMessage" \
        --data "chat_id=$${TO}" \
        --data "parse_mode=HTML" \
        --data "text=$${HEADER}$${LOG}" | jq '.ok')  
  - |
    if [[ "$${OK}" == "false" ]]; then
      cat "$${LOG}" > "status_$${DRONE_BUILD_NUMBER}.log"
      curl -s "https://api.telegram.org/bot$${TG_TOKEN}/sendDocument" \
        -F chat_id="$${TO}" \
        -F parse_mode="HTML" \
        -F caption="$${HEADER}" \
        -F document=@"status_$${DRONE_BUILD_NUMBER}.log"
    fi

  depends_on:
  - push storage
        
  when:
    status:
    - success
    - failure

volumes:
  
- name: source
  temp: {}

- name: tmp
  temp: {}
