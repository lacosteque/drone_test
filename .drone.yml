kind: pipeline
type: docker
name: default

environment:
  HOME_DIR: nerd_build
  TEMP: temp

steps:

- name: prepare
  image: alpine:latest
  volumes:
  - name: temp
    path: /tmp
  commands:
  - |
    mkdir -p "/tmp/$${HOME_DIR}/pkg/usr/bin/" \
             "/tmp/$${HOME_DIR}/pkg/usr/share/" \
             "/tmp/$${HOME_DIR}/$${TEMP}"

- name: prepared loki
  image: alpine:latest
  environment:
    VERSION: 2.7.0
  volumes:
  - name: temp
    path: /tmp
  - name: docker-socket
    path: /var/run/docker.sock
  - name: docker-plugins
    path: /var/lib/docker/plugins/
  privileged: true
  commands:
  - apk add --update --no-cache docker jq tar
  - | 
    if docker plugin ls | grep "grafana/loki-docker-driver:$${VERSION}"; then
      echo "Plugin already exists"
    else
      docker plugin install "grafana/loki-docker-driver:$${VERSION}" --grant-all-permissions
    fi
    
  - | 
    loki_id=$(docker plugin ls | awk '/Loki Logging Driver/ {print $1}')
      if [ -n "$loki_id" ]; then
        inspect_result=$(docker plugin inspect --format '{{json .}}' "$loki_id")
        loki_plugin_id=$(echo "$inspect_result" | jq -r '.Id')

        cp -r "/var/lib/docker/plugins/$${loki_plugin_id}/rootfs" "/tmp/$${HOME_DIR}/$${TEMP}/"
        rm -f "/tmp/$${HOME_DIR}/$${TEMP}/rootfs/var/run"
        cat "/var/lib/docker/plugins/$${loki_plugin_id}/config.json" | jq .plugin.Config > "/tmp/$${HOME_DIR}/$${TEMP}/config.json"
        ls -l "/tmp/$${HOME_DIR}/$${TEMP}"
        tar -czf "/tmp/$${HOME_DIR}/pkg/usr/share/loki-docker-driver-$${VERSION}.tar.gz" "/tmp/$${HOME_DIR}/$${TEMP}/rootfs" "/tmp/$${HOME_DIR}/$${TEMP}/config.json"
      else
        echo "Loki Logging Driver not found."
      fi

      
- name: build bin
  image: alpine:latest
  volumes:
  - name: temp
    path: /tmp
  commands:
  - rm -rf "/tmp/$${HOME_DIR}/"
  - apk add --update --no-cache go
  - mkdir -p "/tmp/$${HOME_DIR}/usr/bin"
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o "/tmp/$${HOME_DIR}/usr/bin/hello" main.go
  depends_on:
  - prepared loki


- name: make pkg
  image: alpine:latest
  environment:
    TZ: Europe/Moscow
    ARCH: x86_64
    RELEASE: 1.1.1
    NAME: nerd-build
    PKG: rpm
  volumes:
  - name: temp
    path: /tmp
  commands:
  - apk add --no-cache ruby tzdata && gem install fpm
  - |
    if [ "$PKG" = "rpm" ]; then \
        apk add --no-cache rpm; \
    elif [ "$PKG" = "deb" ]; then \
        apk add --no-cache binutils tar; \
    fi
  - export VERSION=$(TZ=$${TZ} date +'%Y%m%dT%H%M%S')
  - export PATH_FILE="/tmp/$${HOME_DIR}/pkg/$${NAME}-$${VERSION}-$${RELEASE}.$${ARCH}.$${PKG}"
  - | 
    fpm -s dir -t $${PKG} \
        -p "$${PATH_FILE}" \
        -n "$${NAME}" \
        -v "$${RELEASE}" \
        -a "$${ARCH}" \
        -C "/tmp/$${HOME_DIR}/pkg/" .
  - echo "$${PATH_FILE}" > "/tmp/$${HOME_DIR}/tmp/path.txt"
  depends_on:
  - build bin

  

        
    
  

volumes:
- name: temp
  host:
    path: /tmp

- name: docker-socket
  host:
    path: /var/run/docker.sock

- name: docker-plugins
  host:
    path: /var/lib/docker/plugins/
