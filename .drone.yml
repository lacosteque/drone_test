kind: pipeline
type: docker
name: default


environment:
  SRC_DIR: "/nerd_builder/src"
  BIN_DIR: "/nerd_builder/src/usr/bin"
  LOKI_DIR: "/nerd_builder/src/usr/share/loki-driver"
  OUTPUT_DIR: "/nerd_builder/output"
  TEMP_DIR: "/nerd_builder/temp"
  PKG_PATH: "/nerd_builder/temp/pkg_path.txt"
  TG_TEMPLATE: "/nerd_builder/temp/telegram.tpl"


steps:

- name: make structure
  image: alpine:latest
  volumes:
  - name: builder
    path:  /nerd_builder/
  commands:
  - mkdir -p "$${BIN_DIR}" "$${LOKI_DIR}" "$${TEMP_DIR}" "$${OUTPUT_DIR}"
  - ls -l /ffrfr/ 2>&1 | tee -a "$${TG_TEMPLATE}" || exit 1
  
- name: micro install
  image: alpine:3.15
  volumes:
  - name: builder
    path:  /nerd_builder/
  commands:
  - apk add --update --no-cache curl bash
  - curl -s --show-error https://getmic.ro | bash
  - mv ./micro "$${BIN_DIR}/nerdmicro"
  depends_on:
  - make structure

- name: fetch loki docker driver 
  image: alpine:3.15
  environment:
    VERSION: 2.7.0
  volumes:
  - name: builder
    path: /nerd_builder/
  - name: docker-socket
    path: /var/run/docker.sock
  - name: docker-plugins
    path: /plugins/
  privileged: true
  commands:
  - apk add --update --no-cache docker jq
  - | 
    if [ -z '$(docker plugin ls | grep "grafana/loki-docker-driver:$${VERSION}")' ]; then
      docker plugin install "grafana/loki-docker-driver:$${VERSION}" --grant-all-permissions
      echo "[-] Loki docker driver $${VERSION} not found. Make install" | tee -a "$${TG_TEMPLATE}"
    fi
    
  - | 
    LOKI_ID=$(docker plugin ls | grep "grafana/loki-docker-driver:$${VERSION}" | awk '{print $1}')
      if [ -n "$${LOKI_ID}" ]; then
        INSPECT_RESULT=$(docker plugin inspect --format '{{json .}}' "$${LOKI_ID}")
        LOKI_PLUGIN_ID=$(echo "$${INSPECT_RESULT}" | jq -r '.Id')

        echo "=> Copy rootfs." | tee -a "$${TG_TEMPLATE}"
        cp -r "/plugins/$${LOKI_PLUGIN_ID}/rootfs" "$${TEMP_DIR}"
        
        echo "=> Remove symlink." | tee -a "$${TG_TEMPLATE}"
        rm -f "$${TEMP_DIR}/rootfs/var/run"
        
        echo "[+] Make config." | tee -a "$${TG_TEMPLATE}"
        cat "/plugins/$${LOKI_PLUGIN_ID}/config.json" | jq .plugin.Config > "$${TEMP_DIR}/config.json"
        
        echo "[+] Make archive." | tee -a "$${TG_TEMPLATE}"
        tar -czf "/$${LOKI_DIR}/loki-docker-driver-$${VERSION}.tar.gz" \
            -C "$${TEMP_DIR}" rootfs config.json
      else
        echo "[-] Loki Logging Driver ID not found." | tee -a "$${TG_TEMPLATE}"
      fi
  depends_on:
  - micro install

- name: build nerd
  image: alpine:3.15
  environment:
    GOOS: linux
    GOARCH: amd64
    CGO_ENABLED: 0
  volumes:
  - name: builder
    path: /nerd_builder/
  commands:
  - apk add --update --no-cache go
  - echo "=> Build nerd." | tee -a "$${TG_TEMPLATE}"
  - go build -o "$${BIN_DIR}/nerd" main.go
  depends_on:
  - fetch loki docker driver

- name: make pkg
  image: alpine:3.15
  environment:
    TZ: Europe/Moscow
    NAME: nerd-build
    ARCH: x86_64
    RELEASE: 1.1.1
    OUTPUT_TYPE: rpm
    INPUT_TYPE: dir
    LICENSE: GNU GPL
    LOG: error
  volumes:
  - name: builder
    path: /nerd_builder/
  commands:
  - apk add --no-cache ruby tzdata && gem install fpm
  - |
    if [ "$${OUTPUT_TYPE}" = "rpm" ]; then \
        apk add --no-cache rpm; \
    elif [ "$${OUTPUT_TYPE}" = "deb" ]; then \
        apk add --no-cache binutils tar; \
    fi
  - VERSION="$(TZ=$${TZ} date +'%Y%m%dT%H%M%S')-$${RELEASE}"
  - PACKAGE_PATH="$${OUTPUT_DIR}/$${NAME}-$${VERSION}.$${ARCH}.$${OUTPUT_TYPE}"
  - | 
    #Command-line Reference - https://fpm.readthedocs.io/en/latest/cli-reference.html
    echo "[done] Make $${OUTPUT_TYPE} package." | tee -a "$${TG_TEMPLATE}"
    fpm -s "$${INPUT_TYPE}" \
        -t "$${OUTPUT_TYPE}" \
        -p "$${PACKAGE_PATH}" \
        -n "$${NAME}" \
        -v "$${VERSION}" \
        -a "$${ARCH}" \
        --license "$${LICENSE}" \
        --log "$${LOG}" \
        --description "–°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ü§ì" \
        --url "https://dev.gnivc.ru/gnivc/nerd/" \
        -C "$${SRC_DIR}" . | tee -a "$${TG_TEMPLATE}"
  - echo "$${PACKAGE_PATH}" > "$${PKG_PATH}"
  depends_on:
  - build nerd

- name: push storage
  image: alpine:3.15
  environment:
    URL: http://10.250.26.8:9000
    PASS:
      from_secret: pass
  volumes:
  - name: builder
    path: /nerd_builder/
  commands:
  - apk add --no-cache curl bash 
  - curl -Os https://76ea63ad-874c-4390-a572-052dccadefc6.selstorage.ru/supload/supload.sh
  - cp supload.sh /usr/local/bin/supload
  - chmod +x /usr/local/bin/supload
  - FILE=$(cat "$${PKG_PATH}")
  - echo "=> Push storage." | tee -a "$${TG_TEMPLATE}"
  - supload -u 47066_temp -k "$${PASS}" temp "$${FILE}"
  depends_on:
  - make pkg

- name: telegram
  image: alpine:3.15
  environment:
    TG_TOKEN:
      from_secret: tg_token
    TO: -1001184051909
    MESSAGE_THREAD_ID: 4392 # "–°–µ—Ä–≤–∏—Å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
  volumes:
  - name: builder
    path: /nerd_builder/
  commands:
  - apk add --update --no-cache curl jq bash
  - |
    [[ "$${DRONE_BUILD_STATUS}" == "success" ]] && mark="‚úÖ" || mark="‚ùå"
    [[ -f "$${TEMP_DIR}/telegram.tpl" ]] && log=$(cat "$${TEMP_DIR}/telegram.tpl")
    text="$${mark} <a href=\"$DRONE_BUILD_LINK\">Build #$${DRONE_BUILD_NUMBER}</a>
    Repo: $${DRONE_REPO}
    "    
  - | 
    ok=$(curl -s "https://api.telegram.org/bot$${TG_TOKEN}/sendMessage" \
        --data "chat_id=$${TO}" \
        --data "parse_mode=HTML" \
        --data "text=$${text}$${log}" | jq '.ok')  
  - |
    if [[ "$ok" == "false" ]]; then
      cat "$${TEMP_DIR}/telegram.tpl" > "$${TEMP_DIR}/status_$DRONE_BUILD_NUMBER.log"
      curl -s "https://api.telegram.org/bot$${TG_TOKEN}/sendDocument" \
        -F chat_id="$${TO}" \
        -F parse_mode="HTML" \
        -F caption="$text" \
        -F document=@"$${TEMP_DIR}/status_$DRONE_BUILD_NUMBER.log"
    fi

  depends_on:
  - make structure
  - micro install
  - fetch loki docker driver
  - build nerd
  - make pkg
  - push storage
        
  when:
    status:
    - success
    - failure

volumes:
- name: builder
  temp: {}

- name: docker-socket
  host:
    path: /var/run/docker.sock

- name: docker-plugins
  host:
    path: /var/lib/docker/plugins/
